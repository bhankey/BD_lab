// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportTurnOverSheetsRequest report turn over sheets request
//
// swagger:model ReportTurnOverSheetsRequest
type ReportTurnOverSheetsRequest struct {

	// account ids
	// Min Items: 1
	AccountIds []int64 `json:"account_ids"`

	// year
	// Required: true
	// Maximum: 4000
	// Minimum: 2000
	Year int64 `json:"year"`
}

// Validate validates this report turn over sheets request
func (m *ReportTurnOverSheetsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTurnOverSheetsRequest) validateAccountIds(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountIds) { // not required
		return nil
	}

	iAccountIdsSize := int64(len(m.AccountIds))

	if err := validate.MinItems("account_ids", "body", iAccountIdsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.AccountIds); i++ {

		if err := validate.MinimumInt("account_ids"+"."+strconv.Itoa(i), "body", m.AccountIds[i], 1, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *ReportTurnOverSheetsRequest) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", int64(m.Year)); err != nil {
		return err
	}

	if err := validate.MinimumInt("year", "body", m.Year, 2000, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("year", "body", m.Year, 4000, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this report turn over sheets request based on context it is used
func (m *ReportTurnOverSheetsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReportTurnOverSheetsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportTurnOverSheetsRequest) UnmarshalBinary(b []byte) error {
	var res ReportTurnOverSheetsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
